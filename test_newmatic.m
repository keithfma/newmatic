% Unit tests for newmatic package
%
% Usage:
%   results = runtests(test_newmatic.m);
% %


function tests = test_newmatic()
    % returns handles to test functions from this file (i.e., those that begin with "test")
    tests = functiontests(localfunctions);
end


function setup(testCase)
    % per-test fixture
    testCase.TestData.filename = [tempname, '.mat'];
end


function teardown(testCase)
    % per-test fixture cleanup
    delete(testCase.TestData.filename);
end


function val = info(name, sz, chunks)
    % helper function for keeping variable specifications tidy
    %
    % Arguments:
    %   name: string, variable name
    %   sz: vector of ints, variable size
    %   chunks: vector of ints, chunk size for each dimension
    % %
    val = struct('name', name, 'size', sz, 'chunks', chunks);
end


function mat = run_newmatic(testCase, infos)
    % helper function for running newmatic with a cell array of variable specifications
    %
    % Arguments:
    %   testCase: TODO
    %   infos: array of variable info structs, each as generated by info() helper
    % %
    fname = testCase.TestData.filename;
    
    args = cell(1);
    
    args{1} = fname;
    
    for ii = 1:length(infos)
        this = infos(ii);
        args{end+1} = this.name;  %#ok!
        if ~isempty(this.size)
            args{end+1} = this.size;  %#ok!
        end
        if ~isempty(this.chunks)
            args{end+1} = this.chunks;  %#ok!
        end
    end
    
    mat = newmatic(args{:});
end


function check_results(testCase, expected)
    % check that the MAT-file created by newmatic matches expectations
    fname = testCase.TestData.filename;

    assertTrue(testCase, isfile(fname));

    mat = matfile(fname);
    

end

function test_variable_size_single(testCase)
    % confirm newmatic with only variable name and size inputs
    expect = info('x', [10, 20, 30], []);
    
    mat = run_newmatic(testCase, expect);
   
    mat.x = 5;  %DEBUG
    
    check_results(testCase, expect);
    
end
    



